#!/usr/bin/env python2

import os
import re
import json

LOG_FILE = "/var/log/mail.log"
STATE_FILE = "/var/lib/prometheus-scripts/exim_requests.state"
EXIM_SPAM_STRING = "<CHANGEME>"
ESET_MDA = True
ESET_MDA_STRING = " P=esets-scanned "

# inner state
data = {}
data[ "position" ] = 0
data[ "ham" ] = 0
data[ "spam" ] = {}
data[ "spam" ][ "exim" ] = 0
data[ "spam" ][ "spamassassin" ] = 0
data[ "virus" ] = {}
data[ "virus" ][ "clamav" ] = 0
data[ "auth_failed" ] = 0
data[ "exim_spam_acl" ] = {}

# add ESET counters if necessary
if ESET_MDA:
	data[ "spam" ][ "eset" ] = 0
	data[ "virus" ][ "eset" ] = 0

# open state file to read status
if os.path.isfile( STATE_FILE ):
	with open( STATE_FILE, "r" ) as state_file:
		saved_state = json.load( state_file )

	# update the internal state with the saved state
	data.update( saved_state )

# check if the log is rotated
if os.stat( LOG_FILE ).st_size < data[ "position" ]:
	# FIXME: search for the previous log file (it's not so trivial)
	data[ "position" ] = 0

# open log and seek to the position
log_file = open( LOG_FILE, "r" )
log_file.seek( data[ "position" ] )

for line in log_file:
	# ESET log lines (if it's installed using MDA)
	if ESET_MDA and "esets_daemon[" in line and "summ[" in line:

		# check if it contained a virus or not
		has_virus = re.search( "virus=\"(.+?)\"", line )
		if has_virus and has_virus.groups()[ 0 ] != "is OK":
			data[ "virus" ][ "eset" ] += 1
			continue

		# check if it was SPAM or not
		# unfortunately we only can check if the e-mail is rejected or not
		# so we assume that it could be rejected for two reasons:
		# - it contains a virus what we already checked
		# - it's a SPAM
		status = re.search( "hop=\"(.+?)\"", line )
		if status and status.groups()[ 0 ] != "accepted":
			data[ "spam" ][ "eset" ] += 1

		continue

	# Exim log lines (without the exim[nnn]: [n/n] SpamAssassin lines)
	if "exim[" in line  and not re.search( "exim\[\d+\]: \[\d+", line ):
		# don't count the ESET scanned messages twice
		if " <= " in line and ( not ESET_MDA or ( ESET_MDA and ESET_MDA_STRING in line ) ):
			data[ "ham" ] += 1
			continue

		if EXIM_SPAM_STRING in line:
			data[ "spam" ][ "exim" ] += 1
			has_acl = re.search( EXIM_SPAM_STRING + " (.+)$", line )
			if has_acl:
				acl = has_acl.groups()[ 0 ]
				if not acl in data[ "exim_spam_acl" ]:
					data[ "exim_spam_acl" ][ acl ] = 0
				data[ "exim_spam_acl" ][ acl ] += 1
			continue

		if " rejected after DATA: " in line:
			is_spam = re.search( "This message is possibly spam! \\((\d+)", line )
			if is_spam and int( is_spam.groups()[ 0 ] ) < 900:
				data[ "spam" ][ "spamassassin" ] += 1
				continue

			if "This message contains a virus" in line and not "Eicar-Test-Signature" in line:
				data[ "virus" ][ "clamav" ] += 1
				continue

		if " authenticator failed for " in line:
			data[ "auth_failed" ] += 1
			continue

		continue


data[ "position" ] = log_file.tell()
log_file.close()

# create nice output for Prometheus
print( "# HELP exim_requests Exim requests" )
print( "# TYPE exim_requests counter" )
print( "exim_requests{type=\"ham\"} %d" % ( data[ "ham" ] ) )
print( "exim_requests{type=\"spam\"} %d" % ( sum( data[ "spam" ].values() ) ) )
print( "exim_requests{type=\"virus\"} %d" % ( sum( data[ "virus" ].values() ) ) )
print( "exim_requests{type=\"auth_failed\"} %d" % ( data[ "auth_failed" ] ) )

print( "# HELP exim_spam Number of SPAMs filtered by different sub-systems" )
print( "# TYPE exim_spam counter" )
print( "exim_spam{type=\"exim\"} %d" % ( data[ "spam" ][ "exim" ] ) )
print( "exim_spam{type=\"spamassassin\"} %d" % ( data[ "spam" ][ "spamassassin" ] ) )
if ESET_MDA:
	print( "exim_spam{type=\"eset\"} %d" % ( data[ "spam" ][ "eset" ] ) )

print( "# HELP exim_virus Number of viruses filtered by different sub-systems" )
print( "# TYPE exim_virus counter" )
print( "exim_virus{type=\"clamav\"} %d" % ( data[ "virus" ][ "clamav" ] ) )
if ESET_MDA:
	print( "exim_virus{type=\"eset\"} %d" % ( data[ "virus" ][ "eset" ] ) )


print( "# HELP exim_spam_acl Number of SPAMs filtered by different sub-systems" )
print( "# TYPE exim_spam_acl counter" )
for key in data[ "exim_spam_acl" ]:
	print( "exim_spam_acl{acl=\"%s\"} %d" % ( key, data[ "exim_spam_acl" ][ key ] ) )

# update state file with the actual status
with open( STATE_FILE, "w" ) as state_file:
	json.dump( data, state_file, sort_keys = True )
