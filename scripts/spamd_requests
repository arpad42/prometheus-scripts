#!/usr/bin/ruby
# encoding: UTF-8

require "yaml"

LOG_FILE = "/var/log/messages"
STATE_FILE = "/var/lib/prometheus-scripts/spamd_requests.state"

# default - initial - state
state = {
	:autolearn => { :spam => 0, :ham => 0, :error => 0 },
	:email => { :spam => 0, :ham => 0 },
	:rule => {},
	:position => 0
}

# load the state if it's already exists
if File.exist?( STATE_FILE )
	begin
		state.update( YAML.load_file( STATE_FILE ) )
	rescue
	end
end

# read the log file
File.open( LOG_FILE, "r" ) do | fhnd |
	# check if the logfile is rotated or not
	state[ :position ] = 0 if fhnd.stat.size < state[ :position ]
	fhnd.seek( state[ :position ], IO::SEEK_SET )

	while line = fhnd.gets
		next unless line.include?( " spamd: " )
		next if line.include?( "GTUBE" )
		if line.match( /result: (Y|.) -?\d+ - (.*) scantime=.*autolearn=(.*?) autolearn_force/ )
			# email
			state[ :email ][ :ham ] += 1 if $1 == "."
			state[ :email ][ :spam ] += 1 if $1 == "Y"

			# rules
			$2.split( "," ).each do | rule |
				state[ :rule ][ rule ] = 0 unless state[ :rule ].has_key?( rule )
				state[ :rule ][ rule ] += 1
			end

			# autolearn
			case $3
			when "ham"
				state[ :autolearn ][ :ham ] += 1
			when "no"
			when "spam"
				state[ :autolearn ][ :spam ] += 1
			else
				state[ :autolearn ][ :error ] += 1
			end
		end
	end

	state[ :position ] = fhnd.tell
end

# create metrics for Prometheus
puts( "# HELP spamd_autolearn The number of autolearned messages" )
puts( "# TYPE spamd_autolearn counter" )
state[ :autolearn ].each do | key, value |
	puts( "spamd_autolearn{type=\"#{key}\"} #{value}" )
end

puts( "# HELP spamd_email The number of examined messages" )
puts( "# TYPE spamd_email counter" )
state[ :email ].each do | key, value |
	puts( "spamd_email{type=\"#{key}\"} #{value}" )
end

puts( "# HELP spamd_rule How much a SpamAssassin rule was in use" )
puts( "# TYPE spamd_rule counter" )
state[ :rule ].each do | key, value |
	puts( "spamd_rule{rule=\"#{key}\"} #{value}" )
end

# save the state
File.open( STATE_FILE, "w" ) do | fhnd |
	fhnd.write( state.to_yaml )
end
